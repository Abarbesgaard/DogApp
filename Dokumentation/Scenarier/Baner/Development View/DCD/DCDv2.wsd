@startuml DCDv2
title DCD
skinparam nodesep 30
skinparam ranksep 50
skinparam linetype polyline
skinparam dpi 300
skinparam ComponentBorderThickness 0
skinparam BackgroundColor lightgrey
skinparam ComponentBackgroundColor white
skinparam ComponentBorderColor white
skinparam PackageBorderColor white
rectangle "Blazor" as front{
    
    interface "ITrackService" as ITrackServiceBlazor{
        --Methods--
        - GetTrackAsync(string? name) : Task<Root> 
        - GetAllTracks() : Task<List<TrackDto>> 
    }
    class "TrackService" as TrackServiceBlazor {
        --Fields--
        - <<readonly>> _httpClient : HttpClient
        --Methods--
        + GetTrackAsync(string? name) : Task<Root> 
        + GetAllTracks() : Task<List<TrackDto>> 
        --Constructors--
        + TrackService(httpClient : HttpClient)
    }
    rectangle "DTO" as DTOBlazor{
        class "Root" as RootDTOBlazor{
            --Properties--
            + List : List
        }
        class "List" as ListDtoBlazor{
            -- Properties -- 
            + Tracks : TrackDto[1..*]
        }
        class "ItemDto" as ItemDTOBlazor{
            --Properties--
            + Id : int
            + Name : string
            + Description : string
            + Image : string
            + Category : enum = Sign,Extra
            + TrackItems : TrackItem[1..*]
        }
        class "TrackDto" as TrackDtoBlazor{
            --Properties--
            + Id : int
            + Name : string
            + Height : int
            + Width : int
            + TrackItems : TrackItem[1..*]
            + Category : string
        }
        class "TrackItem" as TrackItemDtoBlazor{
            + Id : int
            + Item : ItemDto
            + ItemId : int
            + Track : TrackDto
            + TrackId : int
            + X : float
            + Y : float
            + Order : int

        }

    }
}
rectangle "Application Programming Interface" as API {
    class TrackController{
        --Fields--
        - <<readonly>> trackService : ITrackService 
        --Methods--
        + CreateTask(trackDto : TrackDTO) : Task<IActionResult> 
        + GetAllTracks() : Task<IActionResult>
        --Constructors--
        + TrackController(trackService : ITrackService) 
    }
    class Controller
    rectangle DTO{
         class "ItemDto" as ItemDTOAPI{
            --Properties--
            + Id : int
            + Name : string
            + Description : string
            + Image : string
            + Category : enum = Sign,Extra
            + TrackItems : TrackItem[1..*]
        }
        class "TrackDto" as TrackDtoAPI{
            --Properties--
            + Id : int
            + Name : string
            + Height : int
            + Width : int
            + TrackItems : TrackItem[1..*]
            + Category : string
        }
        class "TrackItem" as TrackItemDtoAPI{
            + Id : int
            + Item : ItemDto
            + ItemId : int
            + Track : TrackDto
            + TrackId : int
            + X : float
            + Y : float
            + Order : int

        }

    }
}
rectangle "Services" as Service{
    interface ITrackService{
        --Methods--
        - CreateTrack(track :Track ) : Task
        - GetAllTracksAsync() :Task<IEnumerable<Track>> 
    }
    class TrackService{
        -- Fields --
        - _trackRepository : ITrackRepo
        -- Methods --
        + CreateTrack(track :Track ) : Task
        + GetAllTracksAsync() :Task<IEnumerable<Track>> 
        -- Contructor --
        + TrackService(trackRepository: ITrackRepo )
        
    }   
}

rectangle "Repositories" as Repositories{
    class "GenericRepository"{
            --Methods--
            + Get(): IReadOnlyList<T>
            + GetById(int id) <T>
            + Create(T entity) : void
            + Update(T entity) : void
            + Delete(T entity) : void
        }

        interface "IGenericRepository"{
            --Methods--
            + Get(): IReadOnlyList<T>
            + GetById(int id) <T>
            + Create(T entity) : void
            + Update(T entity) : void
            + Delete(T entity) : void
        }
        interface IItemRepo
        interface ITrackRepo
        class "ItemRepo"{

        }
        class "TrackRepo"{

        }
}

rectangle "Data" as models{
    package EntityModels{
        abstract class BaseEntity{
            -- Properties --
            + {abstract}<<abstract>> Id : int
            + {abstract}<<abstract>> Name : string
        }
        entity Track<Bane>{
            -- Properties --
            + <<get, set>> Height : float
            + <<get, set>> Width : float
            ==Navigation Properties==
            + TrackItems : TrackItem[0..*]
        }
        entity TrackItem{
            -- Fields --
            + Id : int
            + Item? : Item
            + ItemId : int

            + Track? :  track
            + TrackId : int
            -- Payload --
            + <<get, set>> X : float
            + <<get, set>> Y : float
            + <<get, set>> Order : int
        }
        entity Item<Bane Element>{
            -- Properties --
            + <<get, set>> Category : Category
            + <<get, set>> Description : string
            + <<get, set>> Image : string
            + <<get, set>> Placement : Placement
            + <<get, set>> Difficulty : string
            ==Navigation Properties==
            + TrackItems : TrackItems[0..*]
        }
    }
    package Data{
        class DataContext{
            --Properties--
            + Tracks : DbSet<Track>
            + Items : DbSet<Item>
            + TrackItems : Dbset<TrackItems>
            --Methods--
            + OnConfiguring(DbContextOptionbuilder optionsBuilder)
            + OnModelCreating(ModelBuilder modelbuilder)
        }
    }

}
front -- API
RootDTOBlazor -> ListDtoBlazor
ListDtoBlazor --> TrackDtoBlazor
TrackDtoBlazor <-- TrackItemDtoBlazor
TrackItemDtoBlazor -> ItemDTOBlazor

TrackServiceBlazor --|> ITrackServiceBlazor
TrackServiceBlazor --> DTOBlazor
TrackController --> ITrackService
TrackController --|> Controller
TrackController --> DTO
ItemDTOAPI <- TrackItemDtoAPI
TrackItemDtoAPI -> TrackDtoAPI
IGenericRepository  <|-- GenericRepository
IGenericRepository --> DataContext
GenericRepository <|-- IItemRepo
GenericRepository <|-- ITrackRepo
ITrackRepo <|-- TrackRepo
IItemRepo <|-- ItemRepo
TrackService -> ITrackRepo
ITrackService <|-- TrackService
BaseEntity  <- Track
BaseEntity <- Item
Track <|--|> TrackItem
TrackItem <|--|> Item
DataContext -|> Track
DataContext -|> TrackItem
DataContext -|> Item

@enduml